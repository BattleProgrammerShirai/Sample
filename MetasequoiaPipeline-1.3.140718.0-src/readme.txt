//-----------------------------------------------------------------------------
// XNA Game Studio 4.0用メタセコイアパイプラインアセンブリ、MetasequoiaPipeline.dll
// Version 1.3.140718.0
//
// 最終更新日: 2014/07/18
//=============================================================================

目次:
　　　　#1 最初に
　　　　#2 パッケージ内容
　　　　#3 使用方法
　　　　#4 インポーターとプロセッサーの機能について
　　　　#5 免責
　　　　#6 ソースコードの扱いについて
　　　　#7 更新履歴

//-----------------------------------------------------------------------------
// #1 最初に
//=============================================================================

 このアセンブリファイルはXNAのコンテントパイプラインへ追加する事により、メタセコイアで作られた3Dモデルファイルを直接インポートできるようになります。
また、メタセコイアのプラグインであるMkxExporterを使って出力されたMkxファイルもインポートできるようになっています。
 MkxExporterはMkxファイルを出力するメタセコイア用のプラグインです。Mkxファイルはモデルデータの他にもKeynoteで作成した
スケルトンとアニメーション情報を持つことができます。MkxはMetasequoia, Keynote, XNAの略です。

　メタセコイアパイプラインの利点としては以下のものがあります:

　　　　1. メタセコイアで作られたモデルをそのままインポートできる
　　　　2. ミラーリング、Catmull-Clark面を使っていた場合でもいちいちフリーズする必要がない
　　　　3. オブジェクト名、マテリアル名、そしてファイル名に日本語を自由に使うことができる
　　　　4. Reachプロファイルでも表示できるモデルを出力する
　　　　5. Keynoteで生成されたアニメーションをMkxファイルを介してインポートできる
　　　　6. XNAのコンテントパイプライン内のデータ構造としてインポートするので他のプロセッサをそのまま流用できる


メタセコイアで出力されるXファイル形式では以下の問題があり、ゲーム用途には不向きな場合があります。

    1. メタセコイア付属のXファイル出力では日本語が使えない
    2. ノード名やマテリアル名が取得できない(ゲームによってはこれらの名前によって処理を変える場合がある)
    3. XファイルはMQOファイルよりファイルサイズが大きくなってしまう
    4. Keynoteはオブジェクト名を変更するので名前衝突が起きる場合がある
    5. オブジェクトノードとスケルトンボーンの区別か付かない
    6. Keynoteを使っている場合、どのボーンにも属さない頂点を作ることができ、この状態ではXNA側でインポートすることができない

 このインポーターでは1～3の問題をこれらの問題を解決し、MkxExporterでは4～6の問題が発生した場合は自動的に問題修正し、
問題発生箇所を知らせてくれるので直ぐに修正することができます。

//-----------------------------------------------------------------------------
// #2 パッケージ内容
//=============================================================================

　メタセコイアパイプラインは以下の三つのパッケージで提供されます。

　　　　1. パイプラインアセンブリファイルを含むMetasequoiaPipeline-1.3.140718.0-bin.zip
　　　　2. サンプルを含むMetasequoiaPipeline-1.3.140718.0-sample.zip
　　　　3. パイプラインアセンブリのソースコードを含むMetasequoiaPipeline-1.3.140718.0-src.zip

　MetasequoiaPipeline-1.3.140718.0-bin.zip内にはリリース設定でコンパイルされた
MetasequoiaPipeline.dllが含まれているだけです。パイプラインアセンブリファイルのみが必要な場合はこのパッケージを使用します。

　MetasequoiaPipeline-1.3.140718.0-sample.zip内にはMetasequoiaPipeline.dllと、
それを使ったサンプルプロジェクト、ModelImportSampleとSkinningSampleが含まれています。

　ModelImportSampleプロジェクトではサンプルモデルをインポート、描画するものです。メタセコイアパイプラインは
不透明と半透明のメッシュを識別できる情報をModelMeshPart.Tagに格納しているので、このサンプルではこの情報を元に
不透明と半透明間での前後関係に関わりなく正しく描画する方法を使用しています。

 SknningSampleにはMkxExporterで出力されたスキニングモデルのアニメーション再生をするサンプルです。
殆どはAppHubサイトにあるSkinningSampleを日本語に訳しただけのものになっています。
変更点としてはSkinnedModelProcessがModelProcessorから派生する代わりに
メタセコイアモデル用のプロセッサーであるMqModelProcessorから派生しているだけです。

　MetasequoiaPipeline-1.3.140718.0-src.zip内にはメタセコイアパイプラインのソースコードが含まれます。
メタセコイアパイプラインのソースレベルでのデバッグや問題修正、機能拡張する場合に便利です。

//-----------------------------------------------------------------------------
// #3 使用方法
//=============================================================================

 MetasequoiaPipeline.dllをコンテントプロジェクトの参照設定に追加した後にMQOファイルやMKXファイルを
コンテントプロジェクトを追加し、実行時にModelオブジェクトとして読み込むだけです。

　MetasequoiaPipeline.dllを追加すると以下のインポーターとプロセッサーが使用できるようになります:

    1. メタセコイアモデルファイル(.MQO)インポーター、MqImporter
    2. Mkxファイルインポーター、MkxImporter
    3. メタセコイアモデルプロセッサー、MqModelProcessor
 
　二つのインポーターはメタセコイアモデルプロセッサーを指すようになっているので、MQOファイルやMKXファイルを
コンテントプロジェクトに追加するだけで自動的にインポーターとプロセッサーが設定されるようになっています。

　どちらの場合もNodeContentとしてインポートし、実行時にはModelオブジェクトとして読み込んで使用できるようになっています。

//-----------------------------------------------------------------------------
// #4 インポーターとプロセッサーの機能について
//=============================================================================

　この章ではメタセコイアパイプラインに含まれるインポーターとプロセッサーがコンテントパイプライン内でどのように動作するかを説明します。

#4.1:　MqImporter: メタセコイアモデルファイルインポーター

 MqImporterは以下のメタセコイアモデルファイルのほぼ全ての情報を読み込むことができます。

　　　　1. オブジェクト階層構造
　　　　2. マテリアル(テクスチャ参照を含む)
　　　　3. ジオメトリ(頂点、面、テクスチャ座標、頂点カラー)
　　　　4. ミラーリング
　　　　5. 回転体
　　　　6. Catmull-Clark曲面

　オブジェクト階層構造はNodeContentとしてインポートされます。
不可視設定のオブジェクトはデータとして読み込みますが、NodeContentやMeshContentへの変換は行いません。
つまり、メタセコイア上では使いたいけど、ゲーム上では使う必要がないオブジェクトは不可視設定にしておくだけで、
読み込まないようにすることができます。
 マテリアルやテクスチャ情報も参照されていないものは変換されないようになっています。

　マテリアル情報はBasicMaterialContentとして読み込まれます。
模様テクスチャはBasicMaterialContent.Textureとして設定され、
透明テクスチャはTextures["AlphaTexture"]に設定され、
凸凹テクスチャはTextures["BumpTexture"]として設定されます。

　ジオメトリ情報はMeshContentとしてインポートされます。
　メタセコイアモデルに設定できるテクスチャ座標と頂点カラーを読み込む事ができます。
　ミラーリング、回転体、Catmull-Clarkといった設定がされている場合はそれらの処理を適用後のジオメトリを生成します。
　XNAのReachプロファイルに対応する為に16ビットインデックスに収まらないジオメトリがある場合は自動的に分割するようになっています。
　ジオメトリに頂点カラーが使われており、それらの頂点カラーないにアルファ値が255以外のものがある、つまり、半透明処理が必要な
頂点カラーがあるかどうかの情報はMeshContentのOpaqueData["HasAlphaVertexColor"]に
bool値として格納されれます。

#4.2:　MkxImporter Mkxファイルインポーター

　メタセコイア自体にはアニメーション機能はありませんが、プラグインを使うことでアニメーションを生成することができます。
そのプラグインの中のひとつがKeynoteで、このKeynoteを使って作られたアニメーションやスケルトンデータを
Mkxファイルとして出力するのがMkxExporterプラグインです。

　そして、このMkxファイルをインポートするのがMkxImporterです。MkxImporterは
MqImporterでインポートできる情報をインポートでき、それに加えて以下の情報を読み込むことができます。

　　　　1. スケルトン構造
　　　　2. アニメーション
　　　　3. ジオメトリのボーンウェイト情報

　Xファイルでは通常のモデル用のボーンとスケルトン用のボーンと区別できませんが、Mkxファイルでは
この二つを区別しているので複雑なモデルボーンとスケルトンボーン構造を読み込むことができます。
　スケルトンのルートボーンは名前が「#Root」になっているNodeContentの子としてBoneContentとして追加されます。
この時、読み込んだスケルトン情報に複数のルートボーンがある場合は「#Skelton」という名前のBoneContentを
生成して、その子として設定されます。

　アニメーションデータはKeynoteで指定されたモーション名をキーとして
AnimationContentDictionaryとして読み込み、スケルトンルートのAnimationsプロパティに追加されます。
　アニメーションデータはKeynoteのFPS設定の間隔でベイクされたデータとして読み込みます。

　ボーンウェイト情報はBoneWeightCollectionとしてジオメトリに読み込まれます。
ミラーリングやCatmull-Clarkといった設定がされている場合、ボーンウェイト情報は自動的に補間されたデータを生成します。


#4.3:　MqModelProcessor メタセコイアモデルプロセッサー

　MqImporterやMkxImporterで読み込んだデータはそのままでもXNA付属の
ModelProcessorで処理できますが、MqModelProcessorではそれに加えて以下の
メタセコイア特有の処理を行います。

　　　　1. 透明テクスチャの合成
　　　　2. 半透明処理が必要なModelMeshPartの自動認識

　メタセコイアでは透明テクスチャに指定したテクスチャをアルファ値とし、模様テクスチャと合成してレンダリングしています。
これと同じ処理をMqModelProcessorではコンテントビルド時に行います。模様テクスチャにアルファ値がある場合は
そのアルファ値と合成します。また、透明テクスチャのみ設定されている場合は透明テクスチャのアルファ値と白色を合成します。

　実際のゲームで使用するアルファブレンドには、アルファテストのみで良いのか、アルファテストによるスムースエッジ処理の有無、
または完全な半透明処理が必要なのかを選択することで効率的なアルファブレンド処理を行います。
　これらの情報はゲーム向けのレベルエディタ等で指定することが最も効率的です。ただ、レベルエディタを作るには
大変な労力を必要とするので、このプロセッサーでは半透明処理が必要と思われる
ModelMeshPart.TagにInt32で1を設定するようになっています。

　この情報を元にして実行時にModelMeshPart.Tagにnull以外が設定しているものが
アルファ値を使っていると判断することができるので、最初にアルファ値を使っていない物(Tag==null)を描画したあとに、
アルファ値を使っている物(Tag!=null)を描画することで、Zバッファの関係で
手前の半透明部分を描画した後に奥の不透明部分を描画できないという視覚的な問題を解決することができます。
　ただし、半透明同士の前後関係による問題までは解決できませんが、
それでも大半の問題はこの情報によって解決することができます。

　MqModelProcessorでは以下の条件のいずれかを満たすときに半透明処理が必要と判断します

　　　　1. マテリアルのAlpha値が255以外の値が設定されている
　　　　2. 頂点カラーのアルファ値が255以外の値が設定されている
　　　　3. 透明テクスチャにテクスチャが指定されている
　　　　4. 模様テクスチャにアルファチャンネルが使用できるテクスチャ(PNGやTGA等)が設定されていて、
　　　　　　　　そのアルファ値に255以外の値が設定されている

//-----------------------------------------------------------------------------
// #5 免責
//=============================================================================

 このパッケージに含まれるファイル使用によるいかなる損害に対しても当方は一切の責任を負いません。

//-----------------------------------------------------------------------------
// #6 連絡先
//=============================================================================

 バグ報告や要望などがありましたら、support@higeneko.netか@HigenekoTechまで連絡ください。

//-----------------------------------------------------------------------------
// #7 ソースコードの扱いについて
//=============================================================================

 このパッケージに含まれるソースコードはXNA Game Studio 4.0向けに書かれています。
これらのソースコードは使用目的(営利、非営利)に関わらず自由に改変、再配布可能です。ただし、使用する人達の混乱を避ける為に
機能的に大幅な変更を加える場合はアセンブリ名を変更するなどしてオリジナルと異なるということが判るように配布するようにしてください。

　MqoImportSampleで使用しているメタセコイアモデルは「萌えろ！CG道場＋」http://ktg.sblo.jp/）からダウンロードしたものを
使用しています。このモデルデータの扱いについてはコンテントフォルダ内にあるReadme.txtに従ってください。

//-----------------------------------------------------------------------------
// #8 更新履歴
//=============================================================================

2014/07/18 Ver. 1.3.140718.0

メタセコイア 4.2.4で出力されるMqoファイルフォーマットに対応

2013/10/30 Ver. 1.2.131030.0

メタセコイア 4.0のMqoファイルフォーマット対応

2012/04/30 Ver. 1.1.120430.0

メタセコイア 3.0のMqoファイルフォーマット対応

2010/12/22 Ver. 1.0.101222.0

初版公開
